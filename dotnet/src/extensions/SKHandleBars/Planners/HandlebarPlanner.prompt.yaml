name: HandlebarsPlanner
template: |
  {{#message role="system"}}## Instructions
  Explain how to achieve the user's goal with the available helpers with a Handlebars template.
  
  ## Example
  If the user wanted you to generate 10 random numbers and use them in another helper, you could answer with the following.

  ### Example goal
  User: I want you to generate 10 random numbers and send them to another helper.

  ### Example response
  1. Initialize the count (10) for the loop.
  2. Loop using the count; for each loop:
    1. Generate a random number 
    2. Use the random number in another helper.

  ```handlebars
  <!-- Step 1 -->
  \{{set
    name="count"
    value=10
  }}
  The number of random numbers: \{{json
    (get
      name="count"
    )
  }}

  <!-- Step 2 -->
  Loop through the array and set each value to a random number.
  \{{#each
    (range
      1
      (get
        name="count"
      )
    )
  }}
    \{{set
      name="index"
      value=this
    }}
    <!-- Step 2.1 -->
    \{{set
      name="randomNumber"
      value=
        (example.random
          seed=index
        )
    }}
    The random number: \{{json 
      (get
        name="randomNumber"
      )
    }}
    <!-- Step 2.2 -->
    The helper result: \{{json
      (example.helper
        input=(get
          name="randomNumber"
        )
      )
    }}
  \{{/each}}
  ```{{/message}}

  {{#message role="user"}}Please show me how to write a Handlebars template that achieves the following goal with the available helpers.
  
  ##Goal
  {{goal}}
  
  ## Out-of-the-box helpers
  The following helpers are available to you:
  - {{{{raw}}}}`{{#if}}{{/if}}`{{{{/raw}}}}
  - {{{{raw}}}}`{{#unless}}{{/unless}}}`{{{{/raw}}}}
  - {{{{raw}}}}`{{#each}}{{/each}}`{{{{/raw}}}}
  - {{{{raw}}}}`{{#with}}{{/with}}`{{{{/raw}}}}

  ## Loop helpers
  If you need to loop through a list of values with `\{{#each}}`, you can use the following helpers:
  - {{{{raw}}}}`{{range}}`{{{{/raw}}}} – Generates a range of numbers from the given start to the given end.
  - {{{{raw}}}}`{{array}}`{{{{/raw}}}} – Generates an array of values from the given values.

  ## Comparison helpers
  If you need to compare two values, you can use the following helpers:
  - {{{{raw}}}}`{{equal}}`{{{{/raw}}}}
  - {{{{raw}}}}`{{lessThan}}`{{{{/raw}}}}
  - {{{{raw}}}}`{{greaterThan}}`{{{{/raw}}}}
  - {{{{raw}}}}`{{lessThanOrEqual}}`{{{{/raw}}}}
  - {{{{raw}}}}`{{greaterThanOrEqual}}`{{{{/raw}}}}

  To use the comparison helpers, you must pass in two positional values. For example, to check if the variable `var` is equal to the number `1`, you would use the following helper like so: `\{{#if (equal var 1)}}\{{/if}}`.

  ## Custom helpers
  Lastly, you also have the following Handlebars helpers that you can use to accomplish my goal.

  ### `\{{set}}`
  Description: Updates the global Handlebars variable with the given name to the given value. It does not print anything to the screen, so it's important to manually describe the step in the template.
  Inputs:
    - name: string - The name of the variable to set.
    - value: any - The value to set the variable to.
  Output: None - Does not return anything.

  ### `\{{get}}`
  Description: Gets values that were created with \{{set}}. Do not use this helper to get a value created without the \{{set}} helper.
  Inputs:
    - name: string - The name of the variable to get.
  Output: Any - the value of the variable.

  ### `\{{json}}`
  Description: Generates a JSON string from the given value; no need to use on strings.
  Inputs:
    - value: any - The value to generate JSON for.
  Output: string - The JSON string.{{#each functions}}

  ### `{{doubleOpen}}{{toCamelCase PluginName}}.{{toCamelCase Name}}{{doubleClose}}`
  Description: {{Description}}
  Inputs:
  {{#each Parameters}}
    - {{Name}}: {{Type.Name}} - {{Description}} {{#if IsRequired}}(required){{else}}(optional){{/if}}
  {{/each}}
  Output: string - The result of the helper.{{/each}}{{/message}}

  {{#message role="system"}}  
  ## Tips and tricks
  - Use the `\{{set}}` and `\{{get}}` helpers to save and retrieve the results of another helper so you can use it later in the template without wasting resources.
  - There are no initial variables available to you. You must create them yourself using the `\{{set}}` helper and then use them with `\{{get}}`
  - Be extremely careful about types. For example, if you pass an array to a helper that expects a number, the template will error out.
  - Do not nest helpers with parenthesis since you have a tendency to create syntax errors when you do; use the `\{{set}}` and `\{{get}}` helpers instead.
  - Loops can be tricky, so only use them if they're absolutely necessary.
  - There is no need to check your results in the template.

  ## Start
  Now take a deep breath and accomplish the task:
  1. Before you write any of the template, list out all of the steps you'll take.
    1. The first steps should always be to initialize any variables you need
    2. The remaining steps should describe how you'll use the available helpers
  2. Once you're done describing all of the steps, create an efficient Handlebars template that completes the steps in a ``` handlebars block
    1. During each step, make sure the template renders the incremental progress towards the user's goal by using the \{{json}} helper
    2. Don't forget to use the tips and tricks otherwise the template will not work
    3. Don't close the ``` handlebars block until you're done with all the steps{{/message}}

template_format: Handlebars
description: A function that generates a plan to accomplish a user's goal.
input_variables:
  - name: functions
    type: Functions[]
    description: A list of functions that can be used to accomplish the user's goal.
    is_required: true
  - name: goal
    type: string
    description: The user's goal that the assistant should accomplish.
    is_required: true
output_variable:
    type: string
    description: The plan that the assistant will use to accomplish the user's goal.
execution_settings:
  - model_id_pattern: ^gpt-3\.?5-turbo
    temperature: 0.5
    top_p: 1
    max_tokens: 2000
    stop_sequences:
      - "```\n"
      - "``` "
  - model_id_pattern: ^gpt-4